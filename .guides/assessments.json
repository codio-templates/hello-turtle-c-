[
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3602415844",
  "source": {
   "name": "Printing: Reading Question 1",
   "showName": true,
   "instructions": "What is wrong with the code snippet below?\n```\ncout << Hello world!;\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "139caba8-e8bd-61a0-7a39-0c25195e9b81",
     "correct": false,
     "answer": "Capitalize `cout`"
    },
    {
     "_id": "bfe87d7a-5096-b0c0-6dbe-988178d48aa2",
     "correct": false,
     "answer": "Use `>>` instead of `<<`"
    },
    {
     "_id": "c6d72e82-b2bf-1931-2c1e-cdcd45608314",
     "correct": true,
     "answer": "Missing `\" \"` around `Hello world!`"
    },
    {
     "_id": "7b69ce64-fca5-4e14-8006-27a8e1a56872",
     "correct": false,
     "answer": "Remove the `;` at the end of the code"
    }
   ],
   "guidance": "Quotation marks are needed around your desired output in order for it to print.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Output"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Printing"
     }
    ],
    "files": [
     "code/fundamentals/tryit1.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/tryit1.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT choose the correct cout command to write text to the console"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4156149016",
  "source": {
   "name": "Printing: Reading Question 2",
   "showName": true,
   "instructions": "Select **all** of the following commands that add a newline character?",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "511429d1-04e7-fb14-8bca-4e2a57b4c0b5",
     "correct": false,
     "answer": "`cout << \"Hello\";`"
    },
    {
     "_id": "6002f3ab-939e-2597-75ad-0bb122ac51bf",
     "correct": true,
     "answer": "`cout << \"Hello\" << endl;`"
    },
    {
     "_id": "52cae018-0d06-be3a-99b4-7e159fb9d4cc",
     "correct": true,
     "answer": "`cout << \"Hello\";`\n`cout << endl;`"
    }
   ],
   "guidance": "Both choices #2 and #3 are correct and will produce the same output. `Hello` will be printed followed by a newline character.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Newline"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Printing"
     }
    ],
    "files": [
     "code/fundamentals/tryit2.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/tryit2.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT choose the correct commands that add a newline character"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1342485909",
  "source": {
   "name": "Printing: Reading Question 3",
   "showName": true,
   "instructions": "Fill in the blanks below about comments in C++.",
   "text": "In C++, the `//` symbol means a <<<single-line>>> comment, and the `/*` and `*/` symbols mean a <<<multi-line>>> comment.",
   "guidance": "In C++, the `//` symbol is used for a single-line comment. The comment begins at the `//` and goes on until the end of the line. The `/*` and `*/` symbols are used for multi-line comments. You must start with the `/*` and end with the `*/`. Everything between the start and end symbols will be considered the comment.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Comments"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Printing"
     }
    ],
    "files": [
     "code/fundamentals/comments.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/comments.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT recall how to create single-line and multi-line comments by using // and /* */ respectively",
   "tokens": {
    "blank": [
     "single-line",
     "multi-line"
    ],
    "text": [
     "In C++, the `//` symbol means a ",
     0,
     " comment, and the `/*` and `*/` symbols mean a ",
     0,
     " comment."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-379797555",
  "source": {
   "name": "Print Statement",
   "showName": true,
   "instructions": "What does the `cout <<` statement do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "5f7329ce-e8e0-36e5-9e19-874eea666278",
     "correct": false,
     "answer": "Sends your output to the printer"
    },
    {
     "_id": "265cd53b-9969-dc24-5318-508a579da1b5",
     "correct": false,
     "answer": "Sends your output to a file"
    },
    {
     "_id": "b4cefead-9d28-99a4-b004-13b7415792ca",
     "correct": true,
     "answer": "Sends your output to the screen"
    },
    {
     "_id": "8b654324-bde6-02db-5fe4-57cc0f6dc58a",
     "correct": false,
     "answer": "Sends your output to the compiler"
    }
   ],
   "guidance": "The `cout <<` command sends your output to your computer's default output which is the computer console or terminal.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Output"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Printing"
     }
    ],
    "files": [
     "code/fundamentals/tryit1.cpp"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT recall what the cout command does"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-761067318",
  "source": {
   "name": "Printing with the Newline Character",
   "showName": true,
   "instructions": "Fill in the blanks with the missing commands that will print the text `Hi!` **with** a newline character. **DO NOT** include any leading or trailing **spaces** when printing `Hi!`.",
   "text": "`cout << <<<\"Hi!\">>> << <<<endl;>>>`",
   "guidance": "The `\"Hi!\"` will print the text `Hi!` and the `endl;` will add a newline character. **Don't forget to include the `;` after `endl`.**",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Newline"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Printing"
     }
    ],
    "files": [
     "code/fundamentals/tryit1.cpp"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT show how to add a newline character with the endl command",
   "tokens": {
    "blank": [
     "\"Hi!\"",
     "endl;"
    ],
    "text": [
     "`cout << ",
     0,
     " << ",
     0,
     "`"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3689792657",
  "source": {
   "name": "Variables",
   "showName": true,
   "instructions": "Select **all** of the properties of a variable below that **do not** change?",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "754b67fa-0d9f-344a-fc5b-74e9b787b333",
     "correct": true,
     "answer": "data type"
    },
    {
     "_id": "87da7ca7-54c4-65cc-7f0d-399abdae4939",
     "correct": true,
     "answer": "name"
    },
    {
     "_id": "b219e8c9-a098-4be7-b75b-110a99dd3892",
     "correct": false,
     "answer": "value"
    }
   ],
   "guidance": "For each variable, the data type and name of the variable never change. The value can be re-assigned or changed as many times as you want!",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Variable Types & Variable Properties"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Variables"
     }
    ],
    "files": [
     "code/fundamentals/variabletypes.cpp"
    ],
    "opened": [
     {
      "type": "tutor",
      "panelNumber": 0,
      "content": "code/fundamentals/variabletypes.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT name the properties of a variable"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2851726778",
  "source": {
   "name": "Integers",
   "showName": true,
   "instructions": "Which of the following values for `number` will produce the output `1000000` when printed using `cout << number << endl;`?",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "7a34cee1-497f-a464-faf5-e49898304872",
     "correct": false,
     "answer": "`int number = \"1000000\";`"
    },
    {
     "_id": "ae8dada4-64a7-a18c-287c-4c6e6ff7aa31",
     "correct": true,
     "answer": "`int number = 1000000;`"
    },
    {
     "_id": "939ab7fb-1a1d-b6fd-3abd-a5a66b51dc35",
     "correct": false,
     "answer": "`int number = 1,000,000;`"
    },
    {
     "_id": "b4a82f74-739b-c3e2-b0bc-c4bdccb18448",
     "correct": false,
     "answer": "`int number = 01000000;`"
    }
   ],
   "guidance": "Only choice #2 is correct. Choices #1 and #3 will result in an error message and choice #4 will output `262144`. \n\nThe reason for `262144` being printed is due to the fact that **octal** numbers start with a `0`. Thus, the system converts `01000000` from an octal number to a decimal number which equals `262144`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Integers"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Variables"
     }
    ],
    "files": [
     "code/fundamentals/integer.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/integer.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand how to assign a value to a variable"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3109256444",
  "source": {
   "name": "Numbers: Int vs. Double",
   "showName": true,
   "instructions": "Fill in the following with the appropriate vocabulary to explain the difference between a double and an int.",
   "text": "A <<<double>>> is a <<<floating point number>>> meaning it has a <<<decimal>>>, where an <<<int>>> is a <<<whole number>>> meaning it does not have a decimal.",
   "guidance": "A `double` is a floating point number or a rational number meaning it has a decimal or represents a fraction, where an `int` (short for integer) is a whole number meaning it does not have a decimal.\n\nBoth can be positive or negative!",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Doubles & Floats"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Variables"
     }
    ],
    "files": [
     "code/fundamentals/double.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/double.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain the difference between an integer, double, and float",
   "tokens": {
    "blank": [
     "double",
     "floating point number",
     "decimal",
     "int",
     "whole number"
    ],
    "text": [
     "A ",
     0,
     " is a ",
     0,
     " meaning it has a ",
     0,
     ", where an ",
     0,
     " is a ",
     0,
     " meaning it does not have a decimal."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3639612203",
  "source": {
   "name": "Boolean",
   "showName": true,
   "instructions": "What is the general rule for boolean values in C++?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "f275bdfe-b626-efbb-7fdb-931d8e798a54",
     "correct": true,
     "answer": "Boolean values are case sensitive and must be lowercase."
    },
    {
     "_id": "ed2ef39e-e321-35ca-b438-bfd4c53c2f19",
     "correct": false,
     "answer": "Boolean values are not case sensitive and can be either uppercase or lowercase."
    },
    {
     "_id": "a293765b-c55e-8803-a2c5-71b0dba928ec",
     "correct": false,
     "answer": "Boolean values are case sensitive and must be uppercase."
    },
    {
     "_id": "8cd1451e-24f0-ae9c-05a3-f436ed7e6180",
     "correct": false,
     "answer": "Boolean values are case sensitive and must be all capitalized."
    }
   ],
   "guidance": "Boolean values in C++ are case sensitive and must be in all lowercase letters: `true` or `false`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Boolean"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Variables"
     }
    ],
    "files": [
     "code/fundamentals/boolean.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/boolean.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT summarize the rules for assigning a value to a boolean variable"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-384100098",
  "source": {
   "name": "Strings",
   "showName": true,
   "instructions": "Select the correct line of code to declare and assign the `var` variable. Drag your selected answer to the highlighted yellow space below. Then click `Check It!`.",
   "initial": "string var = \"this is a string\";\nstring var = 'this is a string';        #distractor\nString var = \"this is a string\";        #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":false,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "In C++, `string` must be in lowercase. The string must also be surrounded by double quotation marks `\"`.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Variables"
     }
    ],
    "files": [
     "code/fundamentals/string.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/string.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT demonstrate their understanding of declaring and assigning a value to a string variable"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-950845008",
  "source": {
   "name": "Declaring Variables",
   "showName": true,
   "instructions": "Which of the following code snippets contains correct variable declarations?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "27918912-b574-ab41-5bfc-89fc6c37793a",
     "correct": false,
     "answer": "```c++\nint var;\nstring var;\n```"
    },
    {
     "_id": "17c83daa-bd5e-2383-65bf-163f2c66512b",
     "correct": false,
     "answer": "```c++\nstring var;\nstring var;\n```"
    },
    {
     "_id": "8c16fcbc-3162-6667-cfc5-7aab31e91404",
     "correct": false,
     "answer": "```c++\nstring var;\nint var 2;\n```"
    },
    {
     "_id": "255b602d-a104-b9df-e3b4-ffc274518ab6",
     "correct": true,
     "answer": "```c++\nstring var;\nint Var;\n```"
    }
   ],
   "guidance": "C++ does not allow different variables to have the same name - regardless of data type.\n\nAdditionally, C++ does not allow spaces in variable names - either use `camelCase` or `snake_case` to separate words.\n\nSince C++ variables are case sensitive, `var` and `Var` are different variables.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Declaring Variables"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Variables"
     }
    ],
    "files": [
     "code/fundamentals/variabledecl.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/variabledecl.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT summarize the rules for declaring variables"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2436518807",
  "source": {
   "name": "Declaring, Initializing, and Assigning Variables",
   "showName": true,
   "instructions": "Construct a program that initializes the variable <code>my_var</code> to 5 and prints it out. \n\nThen, re-assigns <code>my_var</code> to 10 and prints it out.\n\nThe output of the code you are constructing looks like:\n```c++\n5\n10\n```\n\n**You will not need to use all of the blocks.**",
   "initial": "int my_var = 5;\ncout << my_var << endl;\nmy_var = 10;\ncout << my_var << endl;\nint my_var = 10;                         #distractor\nmy_var = 5;              #distractor\nmy_var = \"10\";              #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":false,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "You will need to declare and assign the appropriate data type and variable to `5` first.\n\nYou cannot assign a string (`\"10\"`) to an `int`.\n\nYou cannot re-declare a variable when you reassign (`int my_var = 10;`).",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Declaring Variables, Assigning Variables & Overwriting Variables"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Variables"
     }
    ],
    "files": [
     "code/fundamentals/variableval.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/variableval.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT demonstrate their understanding of declaring, assigning, and overwriting variables"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4248538892",
  "source": {
   "name": "Variable Names",
   "showName": true,
   "instructions": "Which of the following is a correct variable name?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "ef46cb47-6ae1-7b7e-bb79-b3cb3ad1dd30",
     "correct": false,
     "answer": "1st_variable"
    },
    {
     "_id": "67ace8a0-d1b6-37fb-bb45-cef875ec79db",
     "correct": true,
     "answer": "variable_1"
    },
    {
     "_id": "6a2fea69-8153-98d1-8309-156570dcebae",
     "correct": false,
     "answer": "variable_1!"
    },
    {
     "_id": "1798cf41-1267-3074-b033-4e6356554505",
     "correct": false,
     "answer": "-1-variable-"
    }
   ],
   "guidance": "Here are the basic rules for variable names: \n1. Start with a letter or underscore\n2. Remainder of variable name is letters, numbers, or underscores\n3. Cannot use a C++ keyword\n4. Variables are case sensitive",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Naming Variables"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Variables"
     }
    ],
    "files": [
     "code/fundamentals/variableval.cpp"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain the rules of naming a variable"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3992091061",
  "source": {
   "name": "Data Types",
   "showName": true,
   "instructions": "What are the four basic data types used in C++?",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "6b61f606-a123-10dd-489b-faf434c1bd1a",
     "correct": false,
     "answer": "short"
    },
    {
     "_id": "2764deda-4e76-fa7f-c3ec-5b0ac70886dc",
     "correct": true,
     "answer": "int"
    },
    {
     "_id": "1e312e19-e8b2-fc73-a938-ab5479b587d4",
     "correct": false,
     "answer": "long"
    },
    {
     "_id": "762fbca7-5894-2ff9-a70e-86e3c01f21dc",
     "correct": true,
     "answer": "double"
    },
    {
     "_id": "2c15f088-64a7-37ec-22b0-bbcac9ed063c",
     "correct": false,
     "answer": "letter"
    },
    {
     "_id": "cb7acb81-1c8d-82bd-1a6e-a31fc30a0f98",
     "correct": false,
     "answer": "number"
    },
    {
     "_id": "2f0c8126-9a53-98df-9017-a2ef413723d7",
     "correct": true,
     "answer": "string"
    },
    {
     "_id": "fc02caa7-5b54-e879-bc59-a8824f7377a7",
     "correct": true,
     "answer": "bool"
    },
    {
     "_id": "a9c6d9c1-c36e-25ef-797c-364ba83256c1",
     "correct": false,
     "answer": "bits"
    }
   ],
   "guidance": "The four basic data types that you have learned so far are:\n- int - integers (no decimal)\n- double - numbers with a decimal\n- bool - true or false (boolean)\n- string - collections of letters, numbers, and symbols",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Data Types"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Variables"
     }
    ],
    "files": [
     "code/fundamentals/variableval.cpp"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT name the four basic data types: integers (ints), floats, boolean, and strings"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2157437958",
  "source": {
   "name": "Chat Greeting",
   "showName": true,
   "instructions": "Submit your code when you are ready.",
   "command": "./code/fundamentals/labchallenge",
   "preExecuteCommand": "g++ code/fundamentals/labchallenge.cpp -o code/fundamentals/labchallenge",
   "guidance": "Here are two possible solutions to this lab:\n```c++\ncout << greeting << \" Today is \" << dayOfWeek << \", \" << month << \" \" << day << \".\" << endl;\ncout << \"The current wait time is \" << currentWaitMinutes << \" minutes.\" << endl;\n```\n```c++\ncout << greeting;\ncout << \" Today is \";\ncout << dayOfWeek;\ncout << \", \";\ncout << month;\ncout << \" \";\ncout << day;\ncout << \".\" << endl;\ncout << \"The current wait time is \";\ncout << currentWaitMinutes;\ncout << \" minutes.\" << endl;\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "Hello! Monday July 4 9",
     "input": "",
     "output": "Hello! Today is Monday, July 4.\nThe current wait time is 9 minutes.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "Howdy! Monday May 5 19",
     "input": "",
     "output": "Howdy! Today is Monday, May 5.\nThe current wait time is 19 minutes.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "Greetings! Wednesday May 18 1",
     "input": "",
     "output": "Greetings! Today is Wednesday, May 18.\nThe current wait time is 1 minutes.",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "Hi, banana pear 52 -4",
     "input": "",
     "output": "Hi, Today is banana, pear 52.\nThe current wait time is -4 minutes.",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Output & Newline"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Printing"
     }
    ],
    "files": [
     "code/fundamentals/labchallenge.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/labchallenge.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use the cout and endl commands to write text to the console"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-295500519",
  "source": {
   "name": "Fundamentals: Exercise 1",
   "showName": true,
   "instructions": "Submit your code when you are ready.",
   "command": "./code/fundamentals/exercise1",
   "preExecuteCommand": "g++ code/fundamentals/exercise1.cpp -o code/fundamentals/exercise1",
   "guidance": "Here is one solution:\n```c++\nbool my_bool = true;\ncout << my_bool << endl;\nmy_bool = test;\ncout << my_bool << endl;\n```\nAlternatively, you can write your code without the `<< endl` commands: \n```c++\nbool my_bool = true;\ncout << my_bool;\nmy_bool = test;\ncout << my_bool;\n```\nLastly, you can also change `true` to `1`: \n```c++\nbool my_bool = 1;\ncout << my_bool;\nmy_bool = test;\ncout << my_bool;\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "1",
     "input": "",
     "output": "1\n1",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "0",
     "input": "",
     "output": "1\n0",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Declaring Variables, Assigning Variables, Overwriting Variables, Output, Newline & Boolean"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Printing & Variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise1.cpp",
     "code/fundamentals/exercise1.sh"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise1.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT demonstrate their understanding of declaring, assigning, and overwriting variables"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2547360760",
  "source": {
   "name": "Fundamentals: Exercise 2",
   "showName": true,
   "instructions": "Submit your code when you are ready.",
   "command": "./code/fundamentals/exercise2",
   "preExecuteCommand": "g++ code/fundamentals/exercise2.cpp -o code/fundamentals/exercise2",
   "guidance": "You can do the declaration and initialization on the same line:\n```c++\nint my_int = first_num;\ncout << my_int << endl;\nmy_int = second_num;\ncout << my_int << endl;\nmy_int = third_num;\ncout << my_int << endl;\n```\nYou can also write the code without using `<< endl`.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "1 2 3",
     "input": "",
     "output": "1\n2\n3",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "-3 -2 -1",
     "input": "",
     "output": "-3\n-2\n-1",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "5 99 -2",
     "input": "",
     "output": "5\n99\n-2",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Declaring Variables, Assigning Variables, Overwriting Variables, Output, Newline & Integers"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Printing & Variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise2.cpp",
     "code/fundamentals/exercise2.sh"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise2.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT demonstrate their understanding of declaring, assigning, and overwriting variables"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-784241532",
  "source": {
   "name": "Fundamentals: Exercise 3",
   "showName": true,
   "instructions": "Submit your code when you are ready.",
   "command": "./code/fundamentals/exercise3",
   "preExecuteCommand": "g++ code/fundamentals/exercise3.cpp -o code/fundamentals/exercise3",
   "guidance": "Because the string variables are already declared and initialized, you simply need to access them. You need to use `<< endl` to ensure the newlines are printed after each line.\n```c++\ncout << line1 << endl;\ncout << line2 << endl;\n```\n\nYou could use the `<< endl` commands separately if you wanted:\n```c++\ncout << line1;\ncout << endl;\ncout << line2;\ncout << endl;\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "Hi Bye",
     "input": "",
     "output": "Hi\nBye\n",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "1 2",
     "input": "",
     "output": "1\n2\n",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "true false",
     "input": "",
     "output": "true\nfalse\n",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Output & Newline"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Printing"
     }
    ],
    "files": [
     "code/fundamentals/exercise3.cpp",
     "code/fundamentals/exercise3.sh"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise3.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use the cout and endl commands to write text to the console"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2314242167",
  "source": {
   "name": "Fundamentals: Exercise 4",
   "showName": true,
   "instructions": "Submit your code when you are ready.",
   "command": "./code/fundamentals/exercise4",
   "preExecuteCommand": "g++ code/fundamentals/exercise4.cpp -o code/fundamentals/exercise4",
   "guidance": "You can separate your declaration and initialization onto two lines.\n\n```c++\ndouble my_double = 3.14;\ncout << my_double << endl;\nmy_double = number; \ncout << my_double << endl;\n```\n\nYou would have gotten credit for excluding the `<< endl` commands. However, since spacing matters for the presentation of doubles, you should get into the habit of including newlines in your code.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "-9.1",
     "input": "",
     "output": "3.14\n-9.1",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "33.22",
     "input": "",
     "output": "3.14\n33.22",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Declaring Variables, Assigning Variables, Overwriting Variables, Output, Newline & Doubles"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Printing & Variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise4.cpp",
     "code/fundamentals/exercise4.sh"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise4.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT demonstrate their understanding of declaring, assigning, and overwriting variables"
  }
 },
 {
  "type": "test",
  "taskId": "test-1005686765",
  "source": {
   "name": "Fundamentals: Exercise 5",
   "showName": true,
   "instructions": "Use **two** `cout` statements to write the following string:\n`Okay, it is time to learn about operators.`",
   "command": "bash .guides/secure/fundamentals/exercise5.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "It does not matter where you split up the string...but the first `cout` statement **should not** use the `<< endl` command. The `<< endl` command for the second `cout` statement is optional. Here is one solution below:\n```c++\ncout << \"Okay, it is time to \";\ncout << \"learn about operators.\" << endl;\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Output & Newline"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Printing"
     }
    ],
    "files": [
     "code/fundamentals/exercise5.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise5.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use the cout and endl commands to write text to the console"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2728036190",
  "source": {
   "name": "Modulo Calculations",
   "showName": true,
   "instructions": "Assuming all numbers below are of type `int`, which of the following is **NOT** correct?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "d37da241-38d3-7265-7652-0b52199c7fc0",
     "correct": false,
     "answer": "6 % 4 = 2"
    },
    {
     "_id": "ec587023-6f42-fa1a-b70e-127c852d568c",
     "correct": true,
     "answer": "1 % 0 = 1"
    },
    {
     "_id": "d9b4379e-f2ad-91a6-4937-48ebd664b66a",
     "correct": false,
     "answer": "0 % 2 = 0"
    },
    {
     "_id": "e04bf66f-72d1-5550-d91f-cac662282b5e",
     "correct": false,
     "answer": "15 % 4 = 3"
    }
   ],
   "guidance": "Because modulo is a type of division, you cannot modulo divide by 0. Similar to `/ 0`, `% 0` produces an error.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Modulo"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/modulo.cpp"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain the function of the modulo operator"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3568628709",
  "source": {
   "name": "Adding an Int to a Double",
   "showName": true,
   "instructions": "What is **printed** with `cout` when you add an int of `3` and a double of `7.0100` together?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "31d6d7f3-4d42-38c5-2ff2-a0029d66cd4d",
     "correct": false,
     "answer": "An error message"
    },
    {
     "_id": "2c90d265-3ab2-0077-ddd7-8390fbfe16dc",
     "correct": false,
     "answer": "An int of `10`"
    },
    {
     "_id": "77a265d7-9fd2-5ef4-c051-0364c176db4d",
     "correct": true,
     "answer": "A double of `10.01`"
    },
    {
     "_id": "378ccf6c-fb8b-5114-c51e-0059f84ed44c",
     "correct": false,
     "answer": "A double of `10.0100`"
    }
   ],
   "guidance": "Since `cout` excludes all zeros after a decimal point *unless* they are enclosed by non-zero digits, the last two zeros will not be printed and the result will show `10.01`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Addition"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/addition.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": null,
      "content": "code/operators/addition.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain the function of the addition operator"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1014071651",
  "source": {
   "name": "Incrementing",
   "showName": true,
   "instructions": "Select each of the choices below that increments the variable `a` by the value of `1`.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "2e9c6cb5-113c-e426-fc60-fcf92766e4e5",
     "correct": true,
     "answer": "a++;"
    },
    {
     "_id": "7e2eeeb7-2372-2c81-0bc0-ce1a9f19f5a5",
     "correct": false,
     "answer": "a = 1;"
    },
    {
     "_id": "3520d4b8-e19d-f2fd-7511-113dc9258ea4",
     "correct": true,
     "answer": "a+=1;"
    },
    {
     "_id": "a1777c8a-8834-d5e6-cb15-6079aa98bad6",
     "correct": true,
     "answer": "a = a + 1;"
    }
   ],
   "guidance": "Choices 1, 3, and 4 all increment the variable `a` by the value of `1`. ",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Incrementing"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/increment.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": null,
      "content": "code/operators/increment.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT recall how to increment a variable"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1093374804",
  "source": {
   "name": "Evaluating Boolean Expressions",
   "showName": true,
   "instructions": "Using your knowledge of boolean operators, choose the answer that correctly evaluates the expression below:\n\n`( 5 != 4 ) && ( 3 > 0 ) && ( ! 2 == 3 ) || #unknown condition#`",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "52bf55e8-0aeb-d0cc-b127-e285893b6ebb",
     "correct": false,
     "answer": "The expression evaluates to `false` - C++ short circuits because you have a `false` condition with an `&&` operator."
    },
    {
     "_id": "c6bfb6c5-1c1d-b35b-5483-c2fb3818b57b",
     "correct": true,
     "answer": "The expression evaluates to `true` - C++ short circuits because you have a `true` condition with an `||` operator."
    },
    {
     "_id": "03b9c86c-d654-98f0-7bb0-297142d9d2d5",
     "correct": false,
     "answer": "There is not enough information - we would need to know the `#unknown condition#`."
    }
   ],
   "guidance": "Because each of the first three conditions evaluates as true, the `&&` operator will cause their combination to evaluate as `true` too. When you reach the `||` operator, you then have `true || #unknown condition#`. C++ short circuits and evaluates the entire line as `true` without ever evaluating the `#unknown condition#`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Short Circuiting"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Boolean Operators"
     }
    ],
    "files": [
     "code/operators/shortcircuiting.cpp"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain the process of type casting"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3505515237",
  "source": {
   "name": "Evaluating Arithmetic & Boolean Operators",
   "showName": true,
   "instructions": "Determine if the code below returns `true` or `false`.\n\n`(7 >= 7) && (true || 99 < 1) || ! (3 > 5 && 7 < 10) && 2 != 4`",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "4a0b2742-5b83-e859-c8b9-7d2557a19092",
     "correct": true,
     "answer": "true"
    },
    {
     "_id": "67d4cc90-e8e2-4529-739c-4f3ad1f31094",
     "correct": false,
     "answer": "false"
    }
   ],
   "guidance": "First, start by evaluating the expressions in the parentheses.\n\n`(7 >= 7)` returns true.\n`(true || 99 < 1)` returns true.\n`! (3 > 5 && 7 < 10)` returns true.\n`2 != 4` returns true.\n\nSo the boolean expression is now `true && true || true && true`, which returns `true`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Order of Operations"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Boolean Operators & Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/shortcircuiting.cpp"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT outline the order of operations"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2622494909",
  "source": {
   "name": "String Concatenation",
   "showName": true,
   "instructions": "Construct a program that will print:\n`I understand string concatenation!`",
   "initial": "string a = \"I understand\";\nstring b = a + \" string concatenation!\";\ncout << b << endl;\nstring b = a + \"string concatenation!\";           #distractor\nstring a = 'I understand ';           #distractor\ncout << a + b << endl;           #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":false,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "In C++, strings must use double quotes (\") - not single quotes ('). Also, spaces are very important when printing strings.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "String Concatenation"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/concatenation.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/concatenation.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT organize a program using string concatenation"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1772784890",
  "source": {
   "name": "Decrementing",
   "showName": true,
   "instructions": "Complete the code below by selecting the correct choices according to the comments provided.",
   "text": "`int a = 42;`\n`int b = 2;`\n`//decrement a by 1`\n<<<a--;>>>\n`//decrement a by b`\n<<<a-=b;>>>",
   "guidance": "```\nint a = 42;\nint b = 2;\n//decrement a by 1\na--;\n//decrement a by b\na-=b;\n```\n\nTo decrement by 1, you use the `--` operator. To decrement or subtract by any other number, you use `-=`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Decrementing"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/subtraction.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/subtraction.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT recall how to decrement a variable",
   "tokens": {
    "blank": [
     "a--;",
     "a-=b;"
    ],
    "text": [
     "`int a = 42;`\n`int b = 2;`\n`//decrement a by 1`\n",
     0,
     "\n`//decrement a by b`\n",
     0
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2926449521",
  "source": {
   "name": "cout vs. printf()",
   "showName": true,
   "instructions": "Which of the following programs will print `2.000000` to the console?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "d712b150-9dcf-d3fb-546c-df747d2ff373",
     "correct": false,
     "answer": "```c++\nint a = 10;\nint b = 5;\ncout << a / b << endl;\n```"
    },
    {
     "_id": "501cb45d-7199-f705-5df6-c030c1914a4c",
     "correct": false,
     "answer": "```c++\nint a = 10;\ndouble b = 5.0;\ncout << a / b << endl;\n```"
    },
    {
     "_id": "547da8f4-ce68-c058-4b92-a06ad4a3e2ff",
     "correct": false,
     "answer": "```c++\nint a = 10;\ndouble b = 5.0;\nprintf(\"%d \\n\", a / b);\n```"
    },
    {
     "_id": "591dc0ad-a55c-5ac5-20dc-8ca022432dba",
     "correct": true,
     "answer": "```c++\nint a = 10;\ndouble b = 5.0;\nprintf(\"%f \\n\", a / b);\n```"
    }
   ],
   "guidance": "Only choice #4 is correct.\n* Choices #1 & #2 use the `cout` command which will not print the decimal point nor any trailing zeros.\n* Choice #3 uses the `%d` specifier which indicates an integer, not a double, so an error will be returned.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Output"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Printing"
     }
    ],
    "files": [
     "code/operators/printf.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/printf.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between the printf() and cout functions"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3824135241",
  "source": {
   "name": "Division",
   "showName": true,
   "instructions": "Which of the following statements about division in C++ is **FALSE**?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "4bc568c6-3887-0977-b919-2e39ff4c70bd",
     "correct": false,
     "answer": "You can use the division operator with `int`s."
    },
    {
     "_id": "ed42da72-a17c-c241-a7b2-e9269b5723e6",
     "correct": false,
     "answer": "You can use the division operator with `double`s."
    },
    {
     "_id": "2e07c269-734d-39a5-e30c-8e8577baeedc",
     "correct": true,
     "answer": "Division with `int`s and division with `double`s always yield the same results."
    },
    {
     "_id": "536eea2d-a1db-8a4f-655b-121bf0286b80",
     "correct": false,
     "answer": "Dividing by `0.0` returns `inf` as an answer."
    }
   ],
   "guidance": "`int`s and `double`s behave differently with the division operator. Using `double`s will result in a decimal whereas `int`s will result in a whole number with the decimal removed. This means that `10/3` is either a `double` of `3.3333...` or an `int` of `3` based on the declared data type.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Division"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/division.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/division.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define the function of the division operator"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3531725666",
  "source": {
   "name": "Data Conversion",
   "showName": true,
   "instructions": "Construct a program using the code snippets below to produce the following output:\n```c++\nfalse\n```\n==**Note**== that you only have **ONE ATTEMPT** at this problem.",
   "initial": "double a = 0.01;\ncout << boolalpha << (bool) (int) a << endl;\nbool a = true;     #distractor\nint a = 1;     #distractor\ncout << boolalpha << (double) (int) a << endl;     #distractor\ncout << boolalpha << (bool) (double) a << endl;     #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":false,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "In order for the system to print `false`, `a` must be a `bool` in its final casting. That eliminates `cout << boolalpha << (double) (int) a << endl;` as a possibility. `bool a = true;` can be eliminated because `a` will always be `true` regardless of which `cout` command comes next. `int a = 1;` can also be eliminated because casting it to an `int` or `double` will not change its numerical value of `1`. This means that `double a = 0.01;` must be part of the answer. Casting a double of `0.01` to a boolean will result in `true` but casting it to an integer first will force it to become `0`. A boolean of an integer of `0` will produce `false.` Thus the only correct combination is:\n```c++\ndouble a = 0.01;\ncout << boolalpha << (bool) (int) a << endl;\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Type Casting"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/casting.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/casting.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT organize a program using type casting"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2721934056",
  "source": {
   "name": "Modulo",
   "showName": true,
   "instructions": "What does modulo (`%`) do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "d9d2b561-19f8-f4c5-37bd-ec9800d7efee",
     "correct": false,
     "answer": "Determines if a number is even or odd"
    },
    {
     "_id": "06c34459-f429-b479-f68a-46b40e309293",
     "correct": false,
     "answer": "Is another name for division"
    },
    {
     "_id": "de11c543-81d7-f915-82f4-c59b155ac92e",
     "correct": false,
     "answer": "Determines the percentage of two numbers"
    },
    {
     "_id": "97b60669-2a5f-f46c-5cb3-18720dfe3e7b",
     "correct": true,
     "answer": "Returns the remainder after division is performed"
    }
   ],
   "guidance": "Modulo is the remainder after division is performed. So division is a part of modulo, but modulo is not division. Modulo can be used to determine if a number is even or odd, but modulo can do more than that. Finally, the `%` is used with modulo, but modulo does not deal with percentages.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Modulo"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/modulo.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/modulo.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define the function of the modulo operator"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2185092284",
  "source": {
   "name": "Multiplication",
   "showName": true,
   "instructions": "Select each of the choices below where the product (or multiplication) of `a` and `b` is printed.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "468e2bd7-7286-da37-fb63-97eb9b2a9fc2",
     "correct": false,
     "answer": "`cout << (a x b) << endl;`"
    },
    {
     "_id": "504156cf-93b5-fdcd-4e6c-f2b6949874f9",
     "correct": true,
     "answer": "`cout << (a * b) << endl;`"
    },
    {
     "_id": "dd41516b-797b-420e-551e-0b51e9af96e5",
     "correct": false,
     "answer": "`cout << (a**b) << endl;`"
    },
    {
     "_id": "9186852f-7911-eaab-11b5-e8269dc7c77d",
     "correct": true,
     "answer": "`cout << (a*=b) << endl;`"
    }
   ],
   "guidance": "`x` is not equivalent to the multiplication operator in C++ . The operator `**` is not valid in C++ . Only choices #2 and #4 will result in the product of `a` and `b` being printed to the console.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Multiplication"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/multiplication.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/multiplication.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define the function of the multiplication operator"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2840268862",
  "source": {
   "name": "Order of Operations",
   "showName": true,
   "instructions": "At what priority level does C++ perform modulo (`%`) operations?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "315ef563-0daa-3ed3-a25c-0951cb5db724",
     "correct": false,
     "answer": "Parentheses"
    },
    {
     "_id": "e9f5f138-38ae-541e-e142-44d4c4128cf0",
     "correct": false,
     "answer": "Exponents"
    },
    {
     "_id": "2db2b91e-1115-2eaf-6c12-e7340b40da25",
     "correct": true,
     "answer": "Multiplication & Division"
    },
    {
     "_id": "8e04c51e-3ee5-7e23-b177-5b64e41ea078",
     "correct": false,
     "answer": "Addition & Subtraction"
    }
   ],
   "guidance": "Modulo is a type of division, so it is performed along with the `/` and `*` operators in order from left to right.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "PEMDAS & Modulo"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/order.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/order.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT recall the priority levels of PEMDAS"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3979987187",
  "source": {
   "name": "PEMDAS Calculations",
   "showName": true,
   "instructions": "What is the value of the variable `answer` when it is printed?\n```c++\nint answer = -10 + sqrt(25) * 5 / (125 % 100);\ncout << answer << endl;\n```",
   "text": "Enter your answer here: <<<-9>>>",
   "guidance": "The calculations are performed as follow:\n1. Parentheses: (125 % 100) = 25\n   * -10 + sqrt(25) * 5 / 25\n2. Exponents: sqrt(25) = 5\n   * -10 + 5 * 5 / 25\n3. Multiplication & Division: 5 * 5 / 25 = 1\n   * -10 + 1\n4. Addition & Subtraction: -10 + 1 = -9\n   * -9",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "PEMDAS"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain the rules of PEMDAS with arithmetic operators",
   "tokens": {
    "blank": [
     "-9"
    ],
    "text": [
     "Enter your answer here: ",
     0
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3455797759",
  "source": {
   "name": "Equality",
   "showName": true,
   "instructions": "Enter the appropriate **operator symbol** for each definition.",
   "text": "This operator checks if two values are **equal**:\n<<<==>>>\nThis operator **assigns** a value to a variable:\n<<<=>>>\nThis operator checks if two values are **not equal**:\n<<<!=>>>",
   "guidance": "* The `=` operator assigns a value to a variable\n* The `==` operator checks equality between two values\n* The `!=` operator checks inequality between two values",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Equality"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Boolean Operators"
     }
    ],
    "files": [
     "code/operators/equality.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/equality.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define the function of the equality operator",
   "tokens": {
    "blank": [
     "==",
     "=",
     "!="
    ],
    "text": [
     "This operator checks if two values are **equal**:\n",
     0,
     "\nThis operator **assigns** a value to a variable:\n",
     0,
     "\nThis operator checks if two values are **not equal**:\n",
     0
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3904948409",
  "source": {
   "name": "Less Than or Equal To True",
   "showName": true,
   "instructions": "Select **all** of the conditions below that cause the expression `a <= b` to equate to `true`?",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "23089a7b-7107-d990-d68f-e5c2f61fcd6e",
     "correct": true,
     "answer": "If `a` is less than `b`"
    },
    {
     "_id": "d8d66ce9-0a26-421e-44cc-56c5c3133cc0",
     "correct": false,
     "answer": "If `a` is greater than `b`"
    },
    {
     "_id": "cabae154-b21c-cd25-a40a-4a2c7bd58201",
     "correct": true,
     "answer": "If `a` is equal to `b`"
    },
    {
     "_id": "c4a97912-86bf-b136-d344-a0f3af248693",
     "correct": false,
     "answer": "If `a` is both less than and equal to `b`"
    }
   ],
   "guidance": "There are two conditions that would cause `a <= b` to be `true`. One is if `a` is less than `b` and the other is if `a` is equal to `b`. As long as one of those conditions is true, then `a <= b` will be `true`. \n\n**Note** that `a` cannot be both less than and equal to `b` at the same time.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Less Than"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Boolean Operators"
     }
    ],
    "files": [
     "code/operators/lessthan.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lessthan.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain the function of the less than operator"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1809804957",
  "source": {
   "name": "Greater Than or Equal To True",
   "showName": true,
   "instructions": "Select **all** of the expressions below that are true.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "7374c44e-5490-a4b1-26f5-2df8cd81ea92",
     "correct": true,
     "answer": "19 >= 19"
    },
    {
     "_id": "b47faf6f-f6bc-81fc-8bf4-51704823ea88",
     "correct": false,
     "answer": "18.9 >= 19"
    },
    {
     "_id": "6cb3b224-8c5d-004d-5893-56d8ccce036d",
     "correct": false,
     "answer": "-19 >= 19"
    },
    {
     "_id": "39c4bba9-f1cd-7a97-35c5-90487a65ec06",
     "correct": true,
     "answer": "19 >= 9"
    }
   ],
   "guidance": "The `>=` operator only returns `true` if the first number is greater than or equal to the second number. So the following statements would evaluate to true:\n`19 >= 19` and `19 >= 9`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Greater Than"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Boolean Operators"
     }
    ],
    "files": [
     "code/operators/greaterthan.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/greaterthan.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain the function of the greater than operator"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-993858865",
  "source": {
   "name": "Evaluating && Expressions",
   "showName": true,
   "instructions": "Fill in the blanks for the following two statements.",
   "text": "For an overall `&&` expression to be true, all of its boolean expressions must be <<<true>>>.\n\nFor an overall `&&` expression to be false, one or more of its boolean expressions need to be <<<false>>>.",
   "guidance": "All of the boolean expressions must be true for the overall `&&` expression to evaluate to `true`.\n\nOne or more boolean expressions need to be false for the overall `&&` expression to evaluate to `false`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "And"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Boolean Operators"
     }
    ],
    "files": [
     "code/operators/and.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/and.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define the function of the and operator",
   "tokens": {
    "blank": [
     "true",
     "false"
    ],
    "text": [
     "For an overall `&&` expression to be true, all of its boolean expressions must be ",
     0,
     ".\n\nFor an overall `&&` expression to be false, one or more of its boolean expressions need to be ",
     0,
     "."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1097451796",
  "source": {
   "name": "Evaluating || Expressions",
   "showName": true,
   "instructions": "Fill in the blanks for the following two statements.",
   "text": "For an overall `||` expression to be false, all of its boolean expressions must be <<<false>>>.\n\nFor an overall `||` expression to be true, at least one of its boolean expressions needs to be <<<true>>>.",
   "guidance": "All of the boolean expressions must be false for the overall `||` expression to evaluate to `false`.\n\nOne or more boolean expressions need to be true for the overall `||` expression to evaluate to `true`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Or"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Boolean Operators"
     }
    ],
    "files": [
     "code/operators/or.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/or.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define the function of the or operator",
   "tokens": {
    "blank": [
     "false",
     "true"
    ],
    "text": [
     "For an overall `||` expression to be false, all of its boolean expressions must be ",
     0,
     ".\n\nFor an overall `||` expression to be true, at least one of its boolean expressions needs to be ",
     0,
     "."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-111067014",
  "source": {
   "name": "Evaluating ! Expressions",
   "showName": true,
   "instructions": "Evaluate the two expressions below using either **lowercase** `true` or `false`.",
   "text": "`(5 != 4)` returns <<<true>>>.\n`(! (5 == 4))` returns <<<true>>>.",
   "guidance": "Both expressions evaluate to `true`. In the second case, `(5 == 4)` first evaluates to `false` and then `(! (false))` evaluates to `true`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Not"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Boolean Operators"
     }
    ],
    "files": [
     "code/operators/not.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/not.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT explain the function of the not operator",
   "tokens": {
    "blank": [
     "true",
     "true"
    ],
    "text": [
     "`(5 != 4)` returns ",
     0,
     ".\n`(! (5 == 4))` returns ",
     0,
     "."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1499928035",
  "source": {
   "name": "Short Circuiting",
   "showName": true,
   "instructions": "Use the dropdown menus to complete the text below.",
   "text": "## Or Operator\nWhen using the `||` operator, C++ checks to see if the first boolean expression is <<<true>>>. If it is <<<true>>>, C++ returns <<<true>>> and ignores the remaining boolean expression(s).\n\n## And Operator\nWhen using the `&&` operator, C++ checks to see if the first boolean expression is <<<false>>>. If it is <<<false>>>, C++ returns <<<false>>> and ignores the remaining boolean expression(s).",
   "guidance": "If the first boolean expression for the `||` operator is true, then the entire thing is `true`. The remaining boolean expression(s) is ignored.\n\nIf the first boolean expression for the `&&` operator is false, then the entire thing is `false`. The remaining boolean expression(s) is ignored.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Short Circuiting"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Boolean Operators"
     }
    ],
    "files": [
     "code/operators/shortcircuiting.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/shortcircuiting.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define the process of type casting",
   "tokens": {
    "blank": [
     "true",
     "true",
     "true",
     "false",
     "false",
     "false"
    ],
    "text": [
     "## Or Operator\nWhen using the `||` operator, C++ checks to see if the first boolean expression is ",
     0,
     ". If it is ",
     0,
     ", C++ returns ",
     0,
     " and ignores the remaining boolean expression(s).\n\n## And Operator\nWhen using the `&&` operator, C++ checks to see if the first boolean expression is ",
     0,
     ". If it is ",
     0,
     ", C++ returns ",
     0,
     " and ignores the remaining boolean expression(s)."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1652823042",
  "source": {
   "name": "Identifying Arithmetic Operators",
   "showName": true,
   "instructions": "",
   "text": "<<<*>>> is the operator for multiplication.\n<<<%>>> is the operator for modulo.\n<<</>>> is the operator for division.\nThe <<</>>> operator might return a result different from a calculator's if both numbers are `int`s.",
   "guidance": "`*` is the operator for multiplication.\n`%` is the operator for modulo.\n`/` is the operator for division.\nThe `/` operator might return a result different from a calculator's if both numbers are `int`s.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "PEMDAS & Modulo"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/labarithmetic.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/labarithmetic.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT define the functions of all arithmetic operators",
   "tokens": {
    "blank": [
     "*",
     "%",
     "/",
     "/"
    ],
    "text": [
     0,
     " is the operator for multiplication.\n",
     0,
     " is the operator for modulo.\n",
     0,
     " is the operator for division.\nThe ",
     0,
     " operator might return a result different from a calculator's if both numbers are `int`s."
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1446741928",
  "source": {
   "name": "String Operator",
   "showName": true,
   "instructions": "Which of the following **operators** can be used with strings?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "a9e093f6-64af-6f40-34a6-2d0098b78bd1",
     "correct": false,
     "answer": "`/`"
    },
    {
     "_id": "bc7bbafb-5143-5d6c-010a-06af5d6d7c03",
     "correct": false,
     "answer": "`*`"
    },
    {
     "_id": "3cdfdca2-fcbb-e60e-565d-4f560cee35f0",
     "correct": false,
     "answer": "`-`"
    },
    {
     "_id": "68b1f5f5-4646-16e4-cf5d-c90a6194f343",
     "correct": true,
     "answer": "`+`"
    }
   ],
   "guidance": "Only the `+` operator can be used with strings. It serves as the concatenation operator by merging two strings together.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "String Concatenation"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/labstrings.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/labstrings.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT recall the process of string concatenation"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1773163281",
  "source": {
   "name": "List the Order of Operations",
   "showName": true,
   "instructions": "Drag the blocks into the correct order of operations. ==**Note**== that you only have **ONE ATTEMPT** at this problem.\n\n**Hint:** You will not need all of the blocks but make sure that **each** operator is mentioned **once**!",
   "initial": "Parentheses\nExponents\nMultiplication, Division, and Modulo\nAddition and Subtraction\nParentheses and Exponents  #distractor\nMultiplication and Division  #distractor\nModulo  #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":false,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "Order of operations starts with any expression(s) in parentheses. Next, the exponent(s) is calculated. Then multiplication, division, and modulo are calculated from left to right. Finally, addition and subtraction are calculated from left to right.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "PEMDAS"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/labPEMDAS.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/labPEMDAS.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT list the priority levels for PEMDAS"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2877360210",
  "source": {
   "name": "Evaluating Mixed Operations",
   "showName": true,
   "instructions": "What is the results of the following expression?\n\n```c++\n! (5 != 3) && (5 % 3 >= 2)\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "3981c1de-95eb-a5d5-8b52-c50965bbd00f",
     "correct": false,
     "answer": "true"
    },
    {
     "_id": "c4b2907e-a96d-f362-b024-09213d2ae470",
     "correct": true,
     "answer": "false"
    }
   ],
   "guidance": "The first set of parentheses, `(5 != 3)`, evaluates to `true`. The second set of parentheses, `(5 % 3 >= 2)`, also evaluates to `true`. `! true && true` then becomes `false && true` which ultimately evaluates to `false`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Order of Operations"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Boolean Operators & Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/labboolean.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/labboolean.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT use the order of operations to evaluate expressions"
  }
 },
 {
  "type": "test",
  "taskId": "test-1266343318",
  "source": {
   "name": "Constructing Expressions Using Operators",
   "showName": true,
   "instructions": "When your code is ready, click the button below to check your work.",
   "command": "bash .guides/secure/operators/labchallenge.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Order of Operations"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Boolean Operators & Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/labchallenge.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/labchallenge.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct a program that evaluates expressions"
  }
 },
 {
  "type": "test",
  "taskId": "test-1204552917",
  "source": {
   "name": "Compilation Error",
   "showName": true,
   "instructions": "When you have fixed the compilation error, click the button below to check your work.",
   "command": "bash .guides/secure/compiles.sh code/operators/exercise1.cpp",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The compilation bug is located on the following line:\n```c++\nstring b = 9;\n```\n\nThe bug is that `b` is declared as a `string` but is being assigned to `9` which is an `int`. To correct this, you would replace `string` with `int` which results in:\n```c++\nint b = 9;\n```\n",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Strings & Integers"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Data Types"
     }
    ],
    "files": [
     "code/operators/exercise1.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise1.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT demonstrate their understanding of data type compatibility"
  }
 },
 {
  "type": "test",
  "taskId": "test-951636893",
  "source": {
   "name": "Run-Time Error",
   "showName": true,
   "instructions": "When you have fixed the run-time error, click the button below to submit your work for grading.\n\n**==Note==** that you should **NOT** have changed anything outside of the code comment lines (`//`). Otherwise, you will not receive any credit for your work. Select `Restore current files` from the gear icon in the top-right to restore the code file.",
   "command": "bash .guides/secure/operators/exercise1.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The following will solve the code:\n```\nint a = 4;\nint b = 9;\n```\n\nBut there are other valid solutions! Can you find another one?",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "PEMDAS"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/exercise1.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise1.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT demonstrate their understanding of PEMDAS"
  }
 },
 {
  "type": "test",
  "taskId": "test-590390460",
  "source": {
   "name": "Operators: Exercise 2",
   "showName": true,
   "instructions": "When your code is ready, click the button below to submit your work for grading.",
   "command": "bash .guides/secure/operators/exercise2.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Here are a few sample solutions:\n\n```\ncout << boolalpha << ( 5 == 4 ) << endl;\ncout << boolalpha << ( ! (5 < 8 && 6 >= 2) ) << endl;\ncout << boolalpha << ( 5 > 8 || 6 < 2 );\n```\n\nNote that the `<< endl` command is optional.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Order of Operations"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Boolean Operators & Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/exercise2.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise2.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct a program that evaluates expressions"
  }
 },
 {
  "type": "test",
  "taskId": "test-3810335824",
  "source": {
   "name": "Operators: Exercise 3",
   "showName": true,
   "instructions": "When your code is ready, click the button below to submit your work for grading.",
   "command": "bash .guides/secure/operators/exercise3.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "The variable names can be anything you want. One needs to contain the string `Hello` and the other `world`. Don’t forget that there also needs to be a space separating the two words. To print both variables using just one `cout <<` statement, use the `+` operator to concatenate the strings.\n```c++\nstring a = \"Hello \";\nstring b = \"world\";\ncout << (a + b) << endl;\n```\n\nNote that the `<< endl` command is optional. In addition, the `()` surrounding the variables are also optional.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "String Concatenation"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/exercise3.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise3.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct a program using string concatenation"
  }
 },
 {
  "type": "test",
  "taskId": "test-588799791",
  "source": {
   "name": "Operators: Exercise 4",
   "showName": true,
   "instructions": "When your code is ready, click the button below to submit your work for grading.",
   "command": "bash .guides/secure/operators/exercise4.sh",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Below are a few sample solutions.\n\nYou can either declare one or both of the variables as `double`s:\n```c++\ndouble seven = 7.0;\ndouble two = 2.0;\ncout << ( seven / two ) << endl;\n```\n\nOr you can type cast one or both of the variables:\n```c++\nint seven = 7;\nint two = 2;\ncout << ( (double) seven / (double) two ) << endl;\n```\n\nAlternatively, you can convert `string` variables to doubles:\n```c++\nstring seven = \"7\";\nstring two = \"2\";\ncout << ( stod(seven) / stod(two) );\n```\n\nNote that the `<< endl` command is optional.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Type Casting"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/exercise4.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise4.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct a program using type casting"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3680746899",
  "source": {
   "name": "Operators: Exercise 5",
   "showName": true,
   "instructions": "When your code is ready, click the button below to submit your work for grading.",
   "command": "./code/operators/exercise5",
   "preExecuteCommand": "g++ code/operators/exercise5.cpp -o code/operators/exercise5",
   "guidance": "Your friend is attempting to add strings, but the `+` operator concatenates them! To solve this, you need to use `stoi()` to convert the user's string inputs to `int`s. Here is one sample solution:\n```c++\nint sum = stoi(num1) + stoi(num2);\ncout << ( num1 + \" + \" + num2 + \" = \" + to_string(sum) ) << endl;\n```\nYou might have noticed that you need to convert `sum` into a `string` using `to_string()` before it can be printed appropriately to the console.\n\nAlternatively, you can also use additional `<<`s to separate data of different types before they are printed:\n```c++\nint sum = stoi(num1) + stoi(num2);\ncout << ( num1 + \" + \" + num2 + \" = \" ) << sum << endl;\n```\n\nFor better code output, it is recommended that the program include `<< endl`, however, it is optional.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "5\n4",
     "output": "9",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "1\n7",
     "output": "8",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "",
     "input": "3\n4",
     "output": "7",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "String Concatenation & Addition"
     },
     {
      "name": "Programming Language",
      "value": "C++"
     },
     {
      "name": "Category",
      "value": "Arithmetic Operators"
     }
    ],
    "files": [
     "code/operators/exercise5.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise5.cpp"
     },
     {
      "type": "terminal",
      "panelNumber": 1,
      "content": ""
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT discover a solution to a program by demonstrating their understanding of arithmetic operators and data type conversions"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1884977588",
  "source": {
   "name": "If Statement Syntax",
   "showName": true,
   "instructions": "Rearrange the code blocks below to create an `if` statement that prints a string if the boolean expression is `true` and then prints **another** string that's **not** associated with the `if` statement.\n\n**Hint:** Not all of the code blocks will be used and **remember** to indent any command(s) that is associated with the `if` statement by dragging it slightly to the *right*.",
   "initial": "if (7 != 4) {\n  cout << \"Only print me if true\" << endl;\n}\ncout << \"Always print me\" << endl;\nif 7 != 4 {           #distractor\nif (7 != 4)           #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "Remember that the **three** main components of an `if` statement are:\n1. The keyword `if`.\n2. A boolean expression inside `()`.\n3. An indented command(s) inside `{}` that runs if the boolean expression is `true`.\n\n**Note** that commands not associated with an `if` statement should go outside of the `{}` and should not be indented.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/conditionals/ifsyntax.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/ifsyntax.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-864536125",
  "source": {
   "name": "Variable Test Coverage",
   "showName": true,
   "instructions": "Which of the following code segments does **NOT** test for all possible variable values?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "03d3a2d9-cca2-c3cb-d29a-a39856b27e46",
     "correct": false,
     "answer": "```c++\nif (probability < .1) {\n  cout << \"That's improbable!\" << endl;\n}\nif (probability < .5 && probability >= .1) {\n  cout << \"That's unlikely!\" << endl; \n}\nif (probability >= .5) {\n  cout << \"That's a good chance!\" << endl; \n}\n```"
    },
    {
     "_id": "615020b6-4a2d-9bc4-f1ae-040587f542c4",
     "correct": true,
     "answer": "```c++\nif (age < 18) {\n  cout << \"You are too young to vote.\" << endl; \n}\nif (age > 18) {\n  cout << \"You can vote!\" << endl;\n}\n```"
    },
    {
     "_id": "887edee9-59a6-62e9-64ab-ffe73a221f13",
     "correct": false,
     "answer": "```c++\nif (chartPosition <= 10) {\n  cout << \"You made it into the top 10 songs!\" << endl; \n}\nif (chartPosition > 10) {\n  cout << \"Better luck next week.\" << endl; \n}\n```"
    }
   ],
   "guidance": "Choice #2 does not account for `age` that's **equal** to `18`.\n```c++\nif (age < 18) {\n  cout << \"You are too young to vote.\" << endl; \n}\nif (age > 18) {\n  cout << \"You can vote!\" << endl;\n}\n```\n\nTo include all possible values for `age`, revise the fourth line of the code to:\n```c++\nif (age >= 18) {\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/conditionals/if.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/if.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-388923030",
  "source": {
   "name": "Compound If vs. Nested If",
   "showName": true,
   "instructions": "Why might you want to use a **compound conditional** over a **nested** `if` statement?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "742ffe64-b2a3-1982-2bbb-19ca54b4f386",
     "correct": false,
     "answer": "If a conditional has to be false."
    },
    {
     "_id": "3b2d3054-68d4-5f79-2da5-25aee694a4a4",
     "correct": false,
     "answer": "If there is no boolean expression to evaluate."
    },
    {
     "_id": "f24c5b87-3fda-a366-e21b-05245f4e6160",
     "correct": false,
     "answer": "If you want an `if` statement *inside* another `if` statement."
    },
    {
     "_id": "5d7e9335-7087-cb08-6f6b-a1e4b2d2c3e8",
     "correct": true,
     "answer": "If you want your code to be more concise and easier to read."
    }
   ],
   "guidance": "A **compound conditional** and a **nested** `if` statement both allow you to test two or more things to be true. However, compound conditionals tend to have fewer lines of code and are generally easier to read.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/conditionals/compoundconditionals.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/compoundconditionals.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3747129976",
  "source": {
   "name": "If Statement",
   "showName": true,
   "instructions": "Which of the following is **false** regarding `if` statements?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "d23213cf-ce0a-1b8d-822a-1bb057e5aae6",
     "correct": false,
     "answer": "Allows a program to make decisions about what to do."
    },
    {
     "_id": "e0b420d0-7f3e-a780-c286-44420415430c",
     "correct": false,
     "answer": "Allows a specific command(s) to run if the boolean expression is true."
    },
    {
     "_id": "6fde84c4-d1df-735c-c115-01759d7f0b26",
     "correct": true,
     "answer": "Allows a specific command(s) to run if the boolean expression is false."
    },
    {
     "_id": "295caa9e-3446-82c4-c6f5-de2012bd4937",
     "correct": false,
     "answer": "Includes the keyword `if`, a boolean expression inside `()`, and a command(s) to run within `{}`."
    }
   ],
   "guidance": "Choice #3 is false. The program will skip *all* commands within `{}` if the boolean expression evaluates to `false`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2050311025",
  "source": {
   "name": "Even or Odd?",
   "showName": true,
   "instructions": "Complete the `if` statement below so that it will determine if the variable `num` is even or odd.",
   "text": "`if <<<(>>>num%2==0<<<)>>> <<<{>>>`\n<code>&nbsp;&nbsp;cout << \"Even\" << endl;</code>\n`<<<}>>>`\n`if <<<(>>>num%2==1<<<)>>> <<<{>>>`\n<code>&nbsp;&nbsp;cout << \"Odd\" << endl;</code>\n`<<<}>>>`",
   "guidance": "The boolean expression is enclosed within `()` while the command is enclosed within `{}`.\n```c++\nif (num%2==0) {\n  cout << \"Even\" << endl;\n}\nif (num%2==1) {\n  cout << \"Odd\" << endl;\n}\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "(",
     ")",
     "{",
     "}",
     "(",
     ")",
     "{",
     "}"
    ],
    "text": [
     "`if ",
     0,
     "num%2==0",
     0,
     " ",
     0,
     "`\n<code>&nbsp;&nbsp;cout << \"Even\" << endl;</code>\n`",
     0,
     "`\n`if ",
     0,
     "num%2==1",
     0,
     " ",
     0,
     "`\n<code>&nbsp;&nbsp;cout << \"Odd\" << endl;</code>\n`",
     0,
     "`"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2227929766",
  "source": {
   "name": "If Else Syntax",
   "showName": true,
   "instructions": "Select **all** of the following that are true regarding an `if-else` statement.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "86a84146-a8f9-91c9-88dc-f105f6a4dc75",
     "correct": false,
     "answer": "Indentation affects how the code runs."
    },
    {
     "_id": "eb5448ff-b514-adfb-fc80-4de06a132ca1",
     "correct": true,
     "answer": "You need to use curly braces `{}` after both the `if` and the `else` keywords to group code that is conditionally executed."
    },
    {
     "_id": "ba202d17-848c-cb11-0121-9dccfff88afd",
     "correct": true,
     "answer": "The `else` condition does not have a boolean expression within parentheses `()` following it."
    },
    {
     "_id": "3ef7b5a5-677b-c095-610f-bb229ee14cdf",
     "correct": false,
     "answer": "The `else` condition has empty parentheses `()` following it."
    }
   ],
   "guidance": "C++ uses curly braces `{}` to group code commands. While indention is helpful, it does not affect how the program runs. Instead, you need to use curly braces to tell C++ what code to run in both the true condition (after the `if`) and the false condition (after the `else`).\n\nAdditionally, because `else` is associated with the `false` condition, it does not need its own boolean expression. Nor does it need parentheses.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/conditionals/ifelsesyntax.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/ifelsesyntax.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2567094564",
  "source": {
   "name": "If Else Even or Odd",
   "showName": true,
   "instructions": "Dragging and dropping the code blocks below, construct a program that determines whether the variable `num` is even or odd. **Remember** to **indent** where appropriate or you will not receive any credit for your work.\n\n==**Note**== that you only have **ONE ATTEMPT** at this problem.",
   "initial": "if (num % 2 == 0) {\n  cout << \"Even\" << endl;\n}\nelse {\n    cout << \"Odd\" << endl;\n}",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/conditionals/ifelse.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/ifelse.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-506485594",
  "source": {
   "name": "Debugging If Else",
   "showName": true,
   "instructions": "What is wrong with the code below?\n\n**Hint:** There is more than one correct answer.\n\n```c++\nif 3 > 4 {\n  cout << \"true\" << endl;\nelse\n  cout << \"false\" << endl;\n}\n```",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "ed9d1262-50f7-934d-7354-2563befbddad",
     "correct": true,
     "answer": "Parentheses `()` are missing around the boolean expression after the `if` keyword.\n"
    },
    {
     "_id": "34bb00f5-8b34-6e13-8895-e5800e552722",
     "correct": true,
     "answer": "A closing curly brace `}` is missing before the `else` keyword.\n"
    },
    {
     "_id": "c31016bb-a156-6e97-c2a8-9e16b0f73785",
     "correct": false,
     "answer": "Parentheses `()` are missing after the `else` keyword."
    },
    {
     "_id": "32f72284-dcf8-147a-e259-e528f09c2fc8",
     "correct": true,
     "answer": "An open curly brace `{` is missing after the `else` keyword."
    }
   ],
   "guidance": "The correct code should look like this:\n```c++\nif (3 > 4) {\n  cout << \"true\" << endl;\n}\nelse {\n  cout << \"false\" << endl;\n}\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4142274840",
  "source": {
   "name": "Nested If Else",
   "showName": true,
   "instructions": "Your voice assistant device gives helpful information based on certain weather conditions that are present. The code that programs your voice assistant is below:\n```c++\nif (rainy) {\n  if (windy) {\n    cout << \"Wear a rain jacket.\" << endl;\n  }\n  else {\n    cout << \"Bring an umbrella!\" << endl;\n  }\n}\nelse {\n  if (cold) {\n    cout << \"You might need a coat.\" << endl;\n  }\n  else {\n    cout << \"Enjoy your day!\" << endl;\n  }\n}\n```\nWhat would your device say to you if the weather is windy but **not** rainy and **not** cold?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "af443be8-e2e7-5aa5-6ee8-891a694b644a",
     "correct": false,
     "answer": "\"Wear a rain jacket.\""
    },
    {
     "_id": "43ee469f-2932-ff41-ba4e-74b17f2801a3",
     "correct": false,
     "answer": "\"Bring an umbrella!\""
    },
    {
     "_id": "dc498e16-13ea-66be-f6bc-4179005291eb",
     "correct": false,
     "answer": "\"You might need a coat.\""
    },
    {
     "_id": "df2bb02a-a895-4c99-23cc-46ba774d233f",
     "correct": true,
     "answer": "\"Enjoy your day!\""
    }
   ],
   "guidance": "Although the `if (windy)` condition is present in the code, it is nested within the `if (rainy)` condition. That means the `if (windy)` condition can't be executed unless the `if (rainy)` condition is true. Since `if (rainy)` is false, the system skips down to the *outer* `else` statement. Also, since the weather is **not** cold, the second nested *inner* `else` statement is executed and thus `\"Enjoy your day!\"` is provided to you by the device.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2585797860",
  "source": {
   "name": "Switch Case Syntax",
   "showName": true,
   "instructions": "Which of the following code snippets has the correct `switch case` syntax?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "91b4ee25-de38-9983-fd49-a4374a15f758",
     "correct": false,
     "answer": "```c++\nstring num = \"two\";\nint number;\nswitch num:\n  case \"one\": number = 1;\n  case \"two\": number = 2;\n  case \"three\": number = 3;\n  default: number = -1;\n```"
    },
    {
     "_id": "b82c1d23-0a8a-dd97-8a69-9158df8fa089",
     "correct": false,
     "answer": "```c++\nstring num = \"two\";\nint number;\nswitch num:\n    case \"one\": number = 1; break;\n    case \"two\": number = 2; break;\n    case \"three\": number = 3; break;\n    default: number = -1;\n```"
    },
    {
     "_id": "7487e7b5-df14-b081-7c5a-1120544abd3f",
     "correct": false,
     "answer": "```c++\nstring num = \"two\";\nint number;\nswitch (num) {\n    case \"one\": number = 1;\n    case \"two\": number = 2;\n    case \"three\": number = 3;\n    default: number = -1;\n}\n```"
    },
    {
     "_id": "7d9e33c8-db5e-7ee8-3f0d-8d9d9f05b4f8",
     "correct": true,
     "answer": "```c++\nString num = \"two\";\nint number;\nswitch (num) {\n    case \"one\": number = 1; break;\n    case \"two\": number = 2; break;\n    case \"three\": number = 3; break;\n    default: number = -1;\n}\n```"
    }
   ],
   "guidance": "The following rules need to be met:\n\n`switch (num) { `\nThe `switch` keyword is followed by the variable in parentheses `()`. The `case` statements are surrounded by a set of curly braces `{}`.\n\n`case \"one\": number = 1; break;`\nEach `case` keyword is followed by a value and a colon `:`. A `break;` goes after the command to run if the variable == the case value and before the next case.\n\n`default: number = -1;`\nIt is best practice to have the final case be `default`. Since it is the final case, it does not need a `break;` statement.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/conditionals/switchsyntax.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/switchsyntax.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-823392985",
  "source": {
   "name": "Switch Case Usage",
   "showName": true,
   "instructions": "Which of the following would a `switch case` statement be **best** used for?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "cc52a6e5-9b82-4389-d27d-4b513125bba1",
     "correct": true,
     "answer": "Providing feedback to customers over the phone based on the number they press on their keypad."
    },
    {
     "_id": "3f9afd02-1c09-4b4d-a2dd-ec1dae5d68d1",
     "correct": false,
     "answer": "Generating ranges of ages of people who work within a company."
    },
    {
     "_id": "43bda315-c633-2bb3-f58e-af6454ae62f9",
     "correct": false,
     "answer": "Using a car's mileage to determine what services it needs."
    }
   ],
   "guidance": "Choices #2 and #3 both require ranges of values for a particular variable to be tested. Thus, an `else if` statement is better for those situations.\n\nA `switch case` statement would work well in the phone example (choice #1) since the customers can only press 10 different buttons with values that do not change.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [
     "code/conditionals/switch.cpp"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/conditionals/switch.cpp"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3575830610",
  "source": {
   "name": "Switch Case Key Words",
   "showName": true,
   "instructions": "Select the correct key words to make the code below a valid `switch case` statement.",
   "text": "```c++\n<<<switch>>> (years) {\n  <<<case>>> 5: cout << \"5 year award\"; <<<break>>>;\n  <<<case>>> 10: cout << \"10 year award\"; <<<break>>>;\n  <<<case>>> 20: cout << \"20 year award\"; <<<break>>>;\n  <<<case>>> 30: cout << \"30 year award\"; <<<break>>>;\n  default: cout << \"You are not eligible for a longevity award this year\";\n}\n```",
   "guidance": "```c++\nswitch (years) {\n  case 5: cout << \"5 year award\"; break;\n  case 10: cout << \"10 year award\"; break;\n  case 20: cout << \"20 year award\"; break;\n  case 30: cout << \"30 year award\"; break;\n  default: cout << \"You are not eligible for a longevity award this year\";\n}\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "switch",
     "case",
     "break",
     "case",
     "break",
     "case",
     "break",
     "case",
     "break"
    ],
    "text": [
     "```c++\n",
     0,
     " (years) {\n  ",
     0,
     " 5: cout << \"5 year award\"; ",
     0,
     ";\n  ",
     0,
     " 10: cout << \"10 year award\"; ",
     0,
     ";\n  ",
     0,
     " 20: cout << \"20 year award\"; ",
     0,
     ";\n  ",
     0,
     " 30: cout << \"30 year award\"; ",
     0,
     ";\n  default: cout << \"You are not eligible for a longevity award this year\";\n}\n```"
    ],
    "regexPositions": []
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3084879757",
  "source": {
   "name": "Switch Case with Pennies",
   "showName": true,
   "instructions": "You are programming a children's game where the most \"money\" they can hold is 4 pennies. Select **all** of the code snippets below that are **valid** for printing out a full list of store items the player can afford to buy based on the number of `pennies` they have.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "d178e34e-84e7-50bb-4f4a-81464477feda",
     "correct": true,
     "answer": "```c++\nswitch (pennies) {\n  case 1: cout << \"Marble (1 penny)\"; break;\n  case 2: cout << \"Pet rock (2 pennies)\";\n          cout << \"Marble (1 penny)\"; break;    \n  case 3: cout << \"Jump rope (3 pennies)\";\n          cout << \"Pet rock (2 pennies)\";\n          cout << \"Marble (1 penny)\"; break; \n  case 4: cout << \"Goldfish (4 pennies)\";\n          cout << \"Jump rope (3 pennies)\";\n          cout << \"Pet rock (2 pennies)\";\n          cout << \"Marble (1 penny)\"; break; \n default: cout << \"More pennies needed!\";\n}\n```"
    },
    {
     "_id": "a843afc6-f5c3-e7b1-0aaa-80e79b46e4ca",
     "correct": false,
     "answer": "```c++\nswitch (pennies) {\n    case 1: cout << \"Marble (1 penny)\";\n    case 2: cout << \"Pet rock (2 pennies)\";\n    case 3: cout << \"Jump rope (3 pennies)\";\n    case 4: cout << \"Goldfish (4 pennies)\"; break; \n   default: cout << \"More pennies needed!\";\n}\n```"
    },
    {
     "_id": "3c0bdb6c-f5da-39b0-8450-213949669c16",
     "correct": true,
     "answer": "```c++\nswitch (pennies) {\n    case 4: cout << \"Goldfish (4 pennies)\";\n    case 3: cout << \"Jump rope (3 pennies)\";\n    case 2: cout << \"Pet rock (2 pennies)\";\n    case 1: cout << \"Marble (1 penny)\"; break;\n    default: cout << \"More pennies needed!\";\n}\n```"
    },
    {
     "_id": "9683ec3f-3c53-625e-1800-c9421958f781",
     "correct": false,
     "answer": "```c++\nswitch (pennies) {\n    case 4: cout << \"Goldfish (4 pennies)\"; break;\n    case 3: cout << \"Jump rope (3 pennies)\"; break;\n    case 2: cout << \"Pet rock (2 pennies)\"; break;\n    case 1: cout << \"Marble (1 penny)\"; break;\n    default: cout << \"More pennies needed!\";\n}\n```"
    }
   ],
   "guidance": "Choices #1 & #3 will correctly list all of the items that the player is eligible to buy. They produce the exact same results.\n\nChoice #2 will tell the player what they can get with the *exact* number of pennies in addition to the items that they cannot buy. This happens because there is only 1 `break` statement and it occurs in `case 4`. First the system will match the variable's value to the case's value. It will run that case and continue to run until it sees a `break` or it reaches the end of the `switch case`.\n\nChoice #4 will only tell the player the *one* item they can get with the *exact* number of pennies that they have.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 }
]